ctmc

const int rON	= 10;
const int rOFF	= 20;
const int rPREP	= 100;

evolve const double sp [1..10];

evolve const int x1 [0..1];
evolve const int x2 [0..1];
evolve const int x3 [0..1];
evolve const int x4 [0..1];
evolve const int x5 [0..1];
evolve const int x6 [0..1];
evolve const int x7 [0..1];
evolve const int x8 [0..1];
evolve const int x9 [0..1];
evolve const int x10 [0..1];

const double r1	= 5.0;
const double r2	= 4.0;
const double r3	= 4.5;
const double r4	= 6.0;
const double r5	= 8.0;
const double r6	= 5.5;
const double r7	= 3.5;
const double r8	= 6.0;
const double r9	= 6.5;
const double r10	= 7.0;

const double p1	= 1-0.05*sp;
const double p2	= 1-0.04*sp;
const double p3	= 1-0.045*sp;
const double p4	= 1-0.05*sp;
const double p5	= 1-0.04*sp;
const double p6	= 1-0.045*sp;
const double p7	= 1-0.05*sp;
const double p8	= 1-0.04*sp;
const double p9	= 1-0.045*sp;
const double p10	= 1-0.04*sp;


module sensor1
	s1: [0..2] init 0;
	[startS1] s1=0 -> x1*rON 	: (s1'=1) + (1-x1)*rOFF: (s1'=0);
	[succS1]  s1=1 -> p1*r1   	: (s1'=2);
	[failS1]  s1=1 -> (1-p1)*r1: (s1'=2);	[prepS1]  s1=2 -> rPREP   	: (s1'=1);
endmodule

module sensor2
	s2: [0..2] init 0;
	[startS2] s2=0 -> x2*rON 	: (s2'=1) + (1-x2)*rOFF: (s2'=0);
	[succS2]  s2=1 -> p2*r2   	: (s2'=2);
	[failS2]  s2=1 -> (1-p2)*r1: (s2'=2);	[prepS2]  s2=2 -> rPREP   	: (s2'=1);
endmodule

module sensor3
	s3: [0..2] init 0;
	[startS3] s3=0 -> x3*rON 	: (s3'=1) + (1-x3)*rOFF: (s3'=0);
	[succS3]  s3=1 -> p3*r3   	: (s3'=2);
	[failS3]  s3=1 -> (1-p3)*r1: (s3'=2);	[prepS3]  s3=2 -> rPREP   	: (s3'=1);
endmodule

module sensor4
	s4: [0..2] init 0;
	[startS4] s4=0 -> x4*rON 	: (s4'=1) + (1-x4)*rOFF: (s4'=0);
	[succS4]  s4=1 -> p4*r4   	: (s4'=2);
	[failS4]  s4=1 -> (1-p4)*r1: (s4'=2);	[prepS4]  s4=2 -> rPREP   	: (s4'=1);
endmodule

module sensor5
	s5: [0..2] init 0;
	[startS5] s5=0 -> x5*rON 	: (s5'=1) + (1-x5)*rOFF: (s5'=0);
	[succS5]  s5=1 -> p5*r5   	: (s5'=2);
	[failS5]  s5=1 -> (1-p5)*r1: (s5'=2);	[prepS5]  s5=2 -> rPREP   	: (s5'=1);
endmodule

module sensor6
	s6: [0..2] init 0;
	[startS6] s6=0 -> x6*rON 	: (s6'=1) + (1-x6)*rOFF: (s6'=0);
	[succS6]  s6=1 -> p6*r6   	: (s6'=2);
	[failS6]  s6=1 -> (1-p6)*r1: (s6'=2);	[prepS6]  s6=2 -> rPREP   	: (s6'=1);
endmodule

module sensor7
	s7: [0..2] init 0;
	[startS7] s7=0 -> x7*rON 	: (s7'=1) + (1-x7)*rOFF: (s7'=0);
	[succS7]  s7=1 -> p7*r7   	: (s7'=2);
	[failS7]  s7=1 -> (1-p7)*r1: (s7'=2);	[prepS7]  s7=2 -> rPREP   	: (s7'=1);
endmodule

module sensor8
	s8: [0..2] init 0;
	[startS8] s8=0 -> x8*rON 	: (s8'=1) + (1-x8)*rOFF: (s8'=0);
	[succS8]  s8=1 -> p8*r8   	: (s8'=2);
	[failS8]  s8=1 -> (1-p8)*r1: (s8'=2);	[prepS8]  s8=2 -> rPREP   	: (s8'=1);
endmodule

module sensor9
	s9: [0..2] init 0;
	[startS9] s9=0 -> x9*rON 	: (s9'=1) + (1-x9)*rOFF: (s9'=0);
	[succS9]  s9=1 -> p9*r9   	: (s9'=2);
	[failS9]  s9=1 -> (1-p9)*r1: (s9'=2);	[prepS9]  s9=2 -> rPREP   	: (s9'=1);
endmodule

module sensor10
	s10: [0..2] init 0;
	[startS10] s10=0 -> x10*rON 	: (s10'=1) + (1-x10)*rOFF: (s10'=0);
	[succS10]  s10=1 -> p10*r10   	: (s10'=2);
	[failS10]  s10=1 -> (1-p10)*r1: (s10'=2);	[prepS10]  s10=2 -> rPREP   	: (s10'=1);
endmodule


rewards "measurements"
	[succS1] true : 1;
	[succS2] true : 1;
	[succS3] true : 1;
	[succS4] true : 1;
	[succS5] true : 1;
	[succS6] true : 1;
	[succS7] true : 1;
	[succS8] true : 1;
	[succS9] true : 1;
	[succS10] true : 1;
endrewards


rewards "energy"
	[startS1] true : x1=1 ? 10.0 : 0;
	[succS1]  true : 0.4;
	[failS1]  true : 0.4;
	[startS2] true : x2=1 ? 8.0 : 0;
	[succS2]  true : 0.5;
	[failS2]  true : 0.5;
	[startS3] true : x3=1 ? 9.0 : 0;
	[succS3]  true : 0.6;
	[failS3]  true : 0.6;
	[startS4] true : x4=1 ? 5.0 : 0;
	[succS4]  true : 0.65;
	[failS4]  true : 0.65;
	[startS5] true : x5=1 ? 9.0 : 0;
	[succS5]  true : 0.55;
	[failS5]  true : 0.55;
	[startS6] true : x6=1 ? 8.0 : 0;
	[succS6]  true : 0.3;
	[failS6]  true : 0.3;
	[startS7] true : x7=1 ? 5.0 : 0;
	[succS7]  true : 0.45;
	[failS7]  true : 0.45;
	[startS8] true : x8=1 ? 9.0 : 0;
	[succS8]  true : 0.55;
	[failS8]  true : 0.55;
	[startS9] true : x9=1 ? 7.0 : 0;
	[succS9]  true : 0.4;
	[failS9]  true : 0.4;
	[startS10] true : x10=1 ? 8.0 : 0;
	[succS10]  true : 0.8;
	[failS10]  true : 0.8;

endrewards


