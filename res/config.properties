#Note: Automatic transformation of QoS requirements to constraints and minimisation/maximisation objectives
#      is currently under development. For the time being, the user should define the constraints & objectives 
#	   in methods evochecker.EvoChecker.initialise() & evochecker.genetic.jmetal.GeneticProblem.paralleleEvaluate()

#Step 1:Set the probabilistic model template and the probabilistic temporal logic formulae files of the problem
#FX
	MODEL_TEMPLATE_FILE = models/FX/fxMedium.pm
	PROPERTIES_FILE = models/FX/fxMedium.pctl
#UUV
#	MODEL_TEMPLATE_FILE = models/UUV/uuvVeryTiny.sm
#	PROPERTIES_FILE = models/UUV/uuv.csl
#Cluster
#	MODEL_TEMPLATE_FILE = models/Cluster/clusterTemplate2.sm
#	PROPERTIES_FILE 	= models/Cluster/cluster.csl


#Step2 : Set the algorithm (MOGA or Random) to run
	ALGORITHM = SGA
#	ALGORITHM = RANDOM_SINGLE
#	ALGORITHM = NSGAII
	
#	RELIABILITY_THRESHOLD=0.98

#Step 3: Set the population for the MOGAs
	POPULATION_SIZE = 50


#Step 4: Set the maximum number of evaluations
	MAX_EVALUATIONS = 100


#Step 5: Set the number of processors (for parallel execution)
	PROCESSORS = 1


#Step 6: Set the JVM location
#OSx
	JVM =  /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java
	INIT_PORT_NUM = 8860
#linux cs
	#JVM =  /usr/lib/jvm/java-7-oracle/jre/bin/java
#linux yarcc
	#JVM =  /opt/yarcc/infrastructure/java/1.8.0_05/1/default/bin/java


#Step 7: Run 
	#A) Within a Java IDE (e.g. Eclipse) run evochecker.EvoChecker
	#B) From terminal:  
	
	
#EvoRQV: NORMAL | BEST | POPULATION | LEARNING
SEEDING=NORMAL
