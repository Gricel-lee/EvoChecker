#Note: Automatic transformation of QoS requirements to constraints and minimisation/maximisation objectives
#      is currently under development. For the time being, the user should define the constraints & objectives 
#	   within the appropriate properties (e.g., pctl, csl) file.

#Step 1:Set the probabilistic model template and the probabilistic temporal logic formulae files of the problem
PROBLEM = DPM
#FX
#	MODEL_TEMPLATE_FILE = models/FXParam/fxSmall.pm
	#models/FX/fxSmall.pm
#	PROPERTIES_FILE = models/FXParam/fxSmall.pctl
	#models/FX/fxSmall.pctl
#DPM
	MODEL_TEMPLATE_FILE = models/DPM/dpmSmall.pm
	PROPERTIES_FILE = models/DPM/dpm.csl
#Zeroconf
	#MODEL_TEMPLATE_FILE = models/Zeroconf/zeroconf.pm
	#PROPERTIES_FILE = models/Zeroconf/zeroconf.pctl
#COPE
#	MODEL_TEMPLATE_FILE = models/COPE/copeModel.pm
#	PROPERTIES_FILE = models/cope/copeProperties.pctl
#DIE
#	MODEL_TEMPLATE_FILE = models/dieParam/die.pm
#	PROPERTIES_FILE = models/dieParam/die.pctl
#ePMC
#	MODEL_TEMPLATE_FILE = models/ePMC/epmc.pm
#	PROPERTIES_FILE = models/ePMC/epmc.pctl
	


#Step2 : Set the algorithm (MOGA or Random) to run
	#ALGORITHM = RANDOM
	ALGORITHM = NSGAII
	#ALGORITHM = SPEA2
	#ALGORITHM = MOCELL

#Step 3: Set the population for the MOGAs
	POPULATION_SIZE = 50


#Step 4: Set the maximum number of evaluations
	MAX_EVALUATIONS = 500


#Step 5: Set the number of processors (for parallel execution)
	PROCESSORS = 1


#Step 6: Set the JVM location
#OSx
#	JVM=/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/bin/java
	JAVA=/Library/Java/JavaVirtualMachines/openjdk-11.0.2.jdk/Contents/Home/bin/java
#	JVM=/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java
	INIT_PORT = 8860
#linux cs
	#JVM =  /usr/lib/jvm/java-7-oracle/jre/bin/java
#linux yarcc
	#JVM =  /opt/yarcc/infrastructure/java/1.8.0_05/1/default/bin/java


#Step 7: Set the location of model checking engine
	MODEL_CHECKING_ENGINE = /Users/sgerasimou/Documents/Git/EvoChecker/libs/PrismExecutor.jar
	MODEL_CHECKING_ENGINE_LIBS_DIRECTORY = /Users/sgerasimou/Documents/Git/EvoChecker/libs/runtime
	#libs/org/modelChecker/prism/4.5/prism-4.5.jar
	#PrismTacas17.jar


#Step 8: Set additional settings
	VERBOSE = true
	PLOT_PARETO_FRONT = true


#Step 9: Run 
	#A) Within a Java IDE (e.g. Eclipse) run evochecker.EvoChecker
	#B) From terminal:  run launch.sh



#The following are for EvoStudy, a feature (based on JMetal) that allows to run multiple algorithms on the same 
#problem variant for a pre-specified number of runs
#EvoStudy: Set where the results should be saved
	RUNS = 1
	OUTPUTDIR = /Users/sgerasimou/Documents/Git/EvoChecker/data/
	EXPERIMENT = EvoStudy43
	